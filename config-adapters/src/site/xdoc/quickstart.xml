<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements. See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License. You may obtain a copy of the License at
 
         http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Quick start</title>
	</properties>

	<body>
		<section name="Quick start">
		
	  		<p>First, <a href="install.html">install Apache log4php</a>.</p>
  
  			<p>You may also like to read the <a href="docs/introduction.html">introduction chapter</a> to familiarise
  			yoursef with the basic concepts used throughout the documentation and examples.</p>
		
			<subsection name="A trivial example">
				<p>Just want logging to stdout?</p>
				
<pre class="prettyprint linenums">
include('log4php/Logger.php');
$logger = Logger::getLogger("main");
$logger->info("foo");
$logger->warn("bar");
</pre>
			
				<p>This produces the following output:</p>
				
<pre>
Sun Jul 26 01:40:23 2009,021 [10093] INFO main - foo
Sun Jul 26 01:40:23 2009,030 [10093] WARN main - bar
</pre>

			</subsection>
			
			<subsection name="A simple example">
				<p>This example demonstrates how to log messages to a file, but only with level greater or equal to 
				WARN.</p>
				
				<p>Create a configuration file named <code>log4php.xml</code> containing:</p>
				
<pre class="prettyprint linenums"><![CDATA[
<configuration xmlns="http://logging.apache.org/log4php/">
    <appender name="myAppender" class="LoggerAppenderFile">
        <param name="file" value="myLog.log" />
    </appender>
    <root>
        <level value="WARN" />
        <appender_ref ref="myAppender" />
    </root>
</configuration>
]]></pre>

				<p>This configuration file:</p>
				
				<ul>
					<li>Creates an appender named <code>myAppender</code> using appender class <code>
					<a href="docs/appenders.html#LoggerAppenderFile">LoggerAppenderFile</a></code> which is used for 
					logging to a file (on line 2).</li>
					
					<li>Sets the <code>file</code> parameter, which is required for LoggerAppenderFile, to the path 
					to the file in which events will be logged (on line 3).</li>
					
					<li>Sets the root logger level to <code>WARN</code> (on line 6)). This means that logging requests 
					with the level lower than WARN will be ignored.</li>
					
					<li>Links <code>myAppender</code> to the root logger (on line 7) so that all events recieved by the root 
					logger will be forwarded to <code>myAppender</code> and written into the log file.</li>
				</ul>

				<p>To try it out, run the following code:</p>

<pre class="prettyprint linenums"><![CDATA[
// Insert the path where you unpacked log4php
include('log4php/Logger.php');

// Tell log4php to use our configuration file.
Logger::configure('log4php.xml');

// Fetch a logger, it will inherit settings from the root logger
$log = Logger::getLogger('myLogger');

// Start logging
$log->trace("My first message.");   // Not logged because TRACE < WARN
$log->debug("My second message.");  // Not logged because DEBUG < WARN
$log->info("My third message.");    // Not logged because INFO < WARN
$log->warn("My fourth message.");   // Logged because WARN >= WARN
$log->error("My fifth message.");   // Logged because ERROR >= WARN
$log->fatal("My sixth message.");   // Logged because FATAL >= WARN
]]></pre>

				<p>This will create a file named <code>myLog.log</code> containing the following output:</p>
				
<pre><![CDATA[
WARN - My fourth message.
ERROR - My fifth message.
FATAL - My sixth message.
]]></pre>	
				

			</subsection>
		</section>
	</body>
</document>
